name: Publish

on:
  release:
    types: published

permissions:
  contents: write
  packages: write

jobs:
  setup:
    runs-on: self-hosted
    steps:
      - name: Install .NET to Device
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x.x"

      - name: Clone and Checkout the Repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: true

      - name: Run .NET Restore to reload NuGet Packages
        run: dotnet restore

  version:
    runs-on: self-hosted
    needs: setup
    outputs:
      version: ${{ steps.get-tag-version.outputs.version }}

    steps:
      - name: Get Tag Version
        id: get-tag-version
        shell: bash
        run: |
          tagName="${{ github.event.release.tag_name }}"
          version="${tagName#v}"  # Removes the 'v' prefix if it exists
          echo "Extracted version $version from tag"
          echo "version=$version" >> "$GITHUB_OUTPUT"

  build-nuget:
    runs-on: self-hosted
    needs: [setup, version]
    outputs:
      packages: ${{ steps.extract-package-names.outputs.PACKAGES}}
    steps:
      - name: Build for NuGet 
        shell: bash
        run: dotnet publish -c Release -f net8.0 -p:Version=${{ needs.version.outputs.version }} --no-restore -o bin/Release/net8.0

      - name: Pack for NuGet
        id: pack-nuget
        shell: bash
        run: dotnet pack -c Release -p:Version=${{ needs.version.outputs.version }} --no-restore --no-build 

      - name: Extract Nuget Package Names
        id: extract-package-names
        shell: bash
        run: |
          packageNames=()
          while IFS= read -r file; do
              packageNames+=("$(basename "$file")")
          done < <(find . -type f -name "*.nupkg")

          if [ ${#packageNames[@]} -eq 0 ]; then
              echo "No packages found. Setting empty JSON array."
              packageJson="[]"
          elif [ ${#packageNames[@]} -eq 1 ]; then
              echo "Single Package Detected. Formatting in JSON Manually"
              packageJson="[\"${packageNames[0]}\"]"
          else
              echo "Packing as JSON Array"
              packageJson=$(printf '%s\n' "${packageNames[@]}" | jq -R . | jq -s .)
          fi

          # Ensure proper JSON formatting and escaping
          packageJson=$(echo "$packageJson" | jq -c .)

          echo "JSON : $packageJson"
          echo "PACKAGES=$packageJson" >> "$GITHUB_OUTPUT"

  upload-nuget:
    runs-on: self-hosted
    needs: [build-nuget, version]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        packages: ${{ fromJson(needs.build-nuget.outputs.packages) }}
    steps:
      - name: Upload NuGet Packages to Actions Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.packages }}
          path: ./nupkg/${{ matrix.packages }}
          retention-days: 1

      - name: Upload NuGet Packages to Release
        working-directory: ./nupkg/
        shell: bash
        run: |
          echo "Uploading ${{ matrix.packages }} as a Release Asset"
          gh release upload "${{ github.event.release.tag_name }}" "${{ matrix.packages }}" --repo ${{ github.repository }}

  build-source:
    needs: [setup, version]
    runs-on: self-hosted
    strategy:
      max-parallel: 6
      matrix:
        platforms: ["win-x64", "win-x86", "linux-x64", "linux-arm64", "osx-x64", "osx-arm64"]
    steps:
      - name: Build as Standalone Source
        shell: bash
        run: dotnet publish -c Release -r "${{ matrix.platforms }}" -p:Version=${{ needs.version.outputs.version }} --self-contained true --no-restore -o bin/Release/${{ github.event.repository.name }}-${{ matrix.platforms }}
  
  upload-source:
    needs: [build-source, version]
    runs-on: self-hosted
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      max-parallel: 6
      matrix:
        platforms: ["win-x64", "win-x86", "linux-x64", "linux-arm64", "osx-x64", "osx-arm64"]
    steps:
      - name: Compress Standalone Source
        shell: bash
        run: tar -czf bin/Release/${{ github.event.repository.name }}-${{ needs.version.outputs.version }}-${{ matrix.platforms }}.tar.gz bin/Release/${{ github.event.repository.name }}-${{ matrix.platforms }}

      - name: Upload Standalone Source
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ needs.version.outputs.version }}-${{ matrix.platforms }}.tar.gz
          path: bin/Release/${{ github.event.repository.name }}-${{ needs.version.outputs.version }}-${{ matrix.platforms }}.tar.gz
          retention-days: 1

      - name: Upload Standalone Sources to Release
        working-directory: bin/Release/
        shell: bash
        run: |
          echo "Uploading ${{ github.event.repository.name }}-${{ needs.version.outputs.version }}-${{ matrix.platforms }}.tar.gz as a Release Asset"
          gh release upload "${{ github.event.release.tag_name }}" "${{ github.event.repository.name }}-${{ needs.version.outputs.version }}-${{ matrix.platforms }}.tar.gz" --repo ${{ github.repository }}

  publish-to-nuget:
    needs: [setup, build-nuget, build-source]
    runs-on: self-hosted
    strategy:
      matrix:
        packages: ${{ fromJson(needs.build-nuget.outputs.packages) }}

    steps:
      - name: Publish to GitHub Packages
        shell: bash
        run: |
          dotnet nuget push "./nupkg/${{ matrix.packages }}" \
          --source "https://nuget.pkg.github.com/Nano-DNA-Studios/index.json" \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate
          
      - name: Publish to NuGet Website
        shell: bash
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_KEY }}
        run: |
          dotnet nuget push "./nupkg/${{ matrix.packages }}" \
          --source "https://api.nuget.org/v3/index.json" \
          --api-key "$NUGET_API_KEY" \
          --skip-duplicate